// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "../../../../node_modules/rescript/lib/es6/array.js";
import * as Js_dict from "../../../../node_modules/rescript/lib/es6/js_dict.js";
import * as Auto from "../../../src/js/auto";
import * as Fetcher from "../../../src/js/fetcher";
import * as TestModule from "../../../src/js/testModule";

var result = (3 + 4);

console.log(result);

var add = ((x, y)=> x+ y);

console.log(add(3, 99));

const minus = (x,y) => x-y
;

console.log(minus(100, 1));

const testVar = 444
;

console.log(testVar);

var a = [
  "a",
  "b"
];

function createAuto(prim) {
  return new Auto(prim);
}

var meineLimo = new Auto("meineLimo");

console.log(meineLimo);

meineLimo.fahren("Garage");

console.log(meineLimo);

var ente = new Auto("ente").fahren("CasaNoir").fahren("Hawaii").fahren("Rom");

const logMe = (object) => console.log(JSON.stringify(object))
;

logMe([
      "erster",
      "zweiter",
      "dritter"
    ]);

function testRecordToJs(param) {
  return {
          x: param.x,
          y: param.y
        };
}

function testRecordFromJs(param) {
  return {
          x: param.x,
          y: param.y
        };
}

var testData = {
  x: 4,
  y: 5
};

logMe(testRecordToJs(testData));

function wattToJs(param) {
  return {
          was: param.was,
          stunden: param.stunden
        };
}

function wattFromJs(param) {
  return {
          was: param.was,
          stunden: param.stunden
        };
}

const gibMal = () => ({ was: 'ist los?', stunden: 33 })
;

var wattRecord = wattFromJs(gibMal());

console.log(wattRecord.was);

console.log(wattRecord.stunden);

function logNochmal(prim) {
  TestModule.machWas(prim);
  
}

TestModule.machWas("YOLO");

function handleProductData(data) {
  var names = $$Array.map((function (p) {
          return p.name;
        }), data.products);
  console.log("Obst-Produkte aus der API:");
  console.log(names.join(", "));
  
}

function fetchResponseToJs(param) {
  return {
          one: param.one,
          key: param.key
        };
}

function fetchResponseFromJs(param) {
  return {
          one: param.one,
          key: param.key
        };
}

Fetcher.fetchJson("http://echo.jsontest.com/key/value/one/two").then(function (data) {
        return Promise.resolve(fetchResponseFromJs(data));
      }).then(function (recordData) {
      return Promise.resolve((console.log("value with key \"one\" : " + recordData.one + "\nvalue with key \"key\" : " + recordData.key), undefined));
    });

var emptyObject = {};

emptyObject["name"] = "Max Meyer";

emptyObject["age"] = "ss8";

var a$1 = Js_dict.get(emptyObject, "age");

var age = a$1 !== undefined ? a$1 : "";

console.log(age);

const johnny = {name:'Johnny'};
;

console.log("Johnny : " + johnny.name);

johnny.name = "Jane";

johnny.age = johnny.age + 1 | 0;

console.log("Johnny : " + johnny.name);

console.log("Age : " + String(johnny.age));

require('isomorphic-fetch')
;

function dataHandler(data) {
  console.log("self defined type -> data.one : " + data.one);
  console.log("self defined type -> data.key : " + data.key);
  
}

var f = 0.0;

var s = "s";

var t = [
  "adada",
  33,
  "zz"
];

export {
  result ,
  add ,
  f ,
  s ,
  a ,
  t ,
  createAuto ,
  meineLimo ,
  ente ,
  testRecordToJs ,
  testRecordFromJs ,
  testData ,
  wattToJs ,
  wattFromJs ,
  wattRecord ,
  logNochmal ,
  handleProductData ,
  fetchResponseToJs ,
  fetchResponseFromJs ,
  emptyObject ,
  age ,
  dataHandler ,
  
}
/* result Not a pure module */
