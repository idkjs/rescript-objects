// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../../../../node_modules/rescript/lib/es6/list.js";
import * as Curry from "../../../../node_modules/rescript/lib/es6/curry.js";
import * as Faker from "faker";
import * as Js_math from "../../../../node_modules/rescript/lib/es6/js_math.js";
import * as Caml_array from "../../../../node_modules/rescript/lib/es6/caml_array.js";
import * as Caml_js_exceptions from "../../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";

function reiseEtappe(ort) {
  if (ort !== 0) {
    return 2;
  } else {
    return 1;
  }
}

console.log(String(reiseEtappe(/* Hier */0)));

function apply(_n, f, _arg) {
  while(true) {
    var arg = _arg;
    var n = _n;
    if (n === 1) {
      return Curry._1(f, arg);
    }
    _arg = Curry._1(f, arg);
    _n = n - 1 | 0;
    continue ;
  };
}

function generatePeople(list) {
  var age = Js_math.random_int(0, 80);
  var name = Faker.name.findName();
  var city = Faker.address.city();
  if (age < 18) {
    return {
            hd: {
              TAG: /* School */0,
              _0: age,
              _1: name,
              _2: city
            },
            tl: list
          };
  }
  if (age < 30) {
    return {
            hd: {
              TAG: /* University */1,
              _0: age,
              _1: name,
              _2: city
            },
            tl: list
          };
  }
  if (age < 80) {
    return {
            hd: {
              TAG: /* Worker */2,
              _0: age,
              _1: name,
              _2: city,
              _3: Faker.company.companyName()
            },
            tl: list
          };
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "patternMatching.res",
          58,
          2
        ],
        Error: new Error()
      };
}

function logPeople(ppl) {
  return List.iter((function (p) {
                switch (p.TAG | 0) {
                  case /* School */0 :
                      console.log("" + p._1 + ", aged " + p._0 + "  going to school in " + p._2);
                      return ;
                  case /* University */1 :
                      console.log("" + p._1 + ", aged " + p._0 + " going to uni in " + p._2);
                      return ;
                  case /* Worker */2 :
                      console.log("" + p._1 + ", aged " + p._0 + " going to work at " + p._3 + " in " + p._2);
                      return ;
                  
                }
              }), ppl);
}

var bunchOfPpl = apply(100, generatePeople, /* [] */0);

logPeople(bunchOfPpl);

var selectable = [
  {
    TAG: /* GoodResult */1,
    _0: "Product shipped!"
  },
  {
    TAG: /* BadResult */0,
    _0: 500
  },
  {
    TAG: /* BadResult */0,
    _0: 404
  },
  /* NoResult */0
];

var data = Caml_array.get(selectable, Js_math.random_int(0, selectable.length));

function isServerError(code) {
  return code >= 500;
}

var message;

message = typeof data === "number" ? "kein Ergebnis" : (
    data.TAG === /* BadResult */0 ? (
        data._0 >= 500 ? "schlecht" : "keine Ahnung"
      ) : "gut"
  );

console.log("message: " + message);

var myItems = {
  hd: "item1",
  tl: {
    hd: "item2",
    tl: {
      hd: "item3",
      tl: /* [] */0
    }
  }
};

var theItem = "wasser";

var exit = 0;

var item;

try {
  item = List.find((function (i) {
          return i === theItem;
        }), myItems);
  exit = 1;
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID === "Not_found") {
    console.log("No such item found!");
  } else {
    throw exn;
  }
}

if (exit === 1) {
  console.log(item);
}

var wo = /* Hier */0;

export {
  wo ,
  reiseEtappe ,
  apply ,
  generatePeople ,
  logPeople ,
  bunchOfPpl ,
  selectable ,
  data ,
  isServerError ,
  message ,
  myItems ,
  theItem ,
  
}
/*  Not a pure module */
