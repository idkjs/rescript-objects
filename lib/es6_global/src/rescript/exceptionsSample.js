// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../../../../node_modules/rescript/lib/es6/list.js";
import * as Caml_exceptions from "../../../../node_modules/rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "../../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";

var DummerFehler = /* @__PURE__ */Caml_exceptions.create("ExceptionsSample.DummerFehler");

var NochDuemmererFehler = /* @__PURE__ */Caml_exceptions.create("ExceptionsSample.NochDuemmererFehler");

var AbsolutDummerFehler = /* @__PURE__ */Caml_exceptions.create("ExceptionsSample.AbsolutDummerFehler");

function f(fehlerCode) {
  switch (fehlerCode) {
    case "a" :
        throw {
              RE_EXN_ID: DummerFehler,
              _1: 500,
              _2: "DummerFehler",
              Error: new Error()
            };
    case "b" :
        throw {
              RE_EXN_ID: NochDuemmererFehler,
              _1: "NochDuemmererFehler",
              Error: new Error()
            };
    case "c" :
        throw {
              RE_EXN_ID: AbsolutDummerFehler,
              _1: -10.0,
              Error: new Error()
            };
    default:
      console.log("f(" + fehlerCode + ") = ok");
      return "ok";
  }
}

function tryFehlerCode(fehlerCode) {
  try {
    return f(fehlerCode);
  }
  catch (raw_value){
    var value = Caml_js_exceptions.internalToOCamlException(raw_value);
    if (value.RE_EXN_ID === DummerFehler) {
      console.log("Mapped DummerFehler oder NochDuemmererFehler to: defaultValue");
      return "defaultValue";
    }
    if (value.RE_EXN_ID === NochDuemmererFehler) {
      console.log("Mapped DummerFehler oder NochDuemmererFehler to: defaultValue");
      return "defaultValue";
    }
    if (value.RE_EXN_ID === AbsolutDummerFehler) {
      console.log("Mapped AbsolutDummerFehler to: defaultValue");
      return "defaultValue";
    }
    throw value;
  }
}

function check_f(fehlerCode) {
  var result;
  try {
    result = f(fehlerCode);
  }
  catch (raw_value){
    var value = Caml_js_exceptions.internalToOCamlException(raw_value);
    if (value.RE_EXN_ID === DummerFehler) {
      console.log("DummerFehler oder NochDuemmererFehler: " + value._2);
      return "defaultValue";
    }
    if (value.RE_EXN_ID === NochDuemmererFehler) {
      console.log("DummerFehler oder NochDuemmererFehler: " + value._1);
      return "defaultValue";
    }
    if (value.RE_EXN_ID === AbsolutDummerFehler) {
      console.log("AbsolutDummerFehler: " + value._1);
      return "defaultValue";
    }
    throw value;
  }
  console.log("success: " + result);
  return result;
}

var cases = {
  hd: "a",
  tl: {
    hd: "b",
    tl: {
      hd: "c",
      tl: {
        hd: "d",
        tl: /* [] */0
      }
    }
  }
};

List.map(tryFehlerCode, cases);

List.map(check_f, cases);

export {
  DummerFehler ,
  NochDuemmererFehler ,
  AbsolutDummerFehler ,
  f ,
  tryFehlerCode ,
  check_f ,
  cases ,
  
}
/*  Not a pure module */
